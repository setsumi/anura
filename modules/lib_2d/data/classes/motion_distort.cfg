{	
	stretch: true,
	squash: true,
	obj: {type: "custom_obj"},
	
	_old_x: {type: "null|int", default: null},
	_old_y: {type: "null|int", default: null},
	_old_delta: {type: "Point2d", default:[0,0]},
	_squash_waves: {type: "[{to:Point2d, time:decimal}]", default: []}, //A list of the squishes we're experiencing. irl, these would be 'waves' travelling through the medium of a body.
	_squash_step: 0.15, //of 1

	process: "def(decimal distort_strength = 1.0) [
		//Store the old state, so we have an accurate velocity. Nothing in the engine tells us this, I think.
		set(_old_x, obj.x),
		set(_old_y, obj.y),
		
		if(_old_x != null and _old_y != null, ([
			set(_old_delta, new_delta),
			set(_squash_waves, squashWaves),
			//decay by going sin-ly over [0,0], to, [0,0] using lib.math.interpolate.
		
			(set(obj.custom_draw, [ //The distortion for the object is calculated as a blob. Perhaps adding different lists would be clearer?
				0,1,2,3, 
				[if(stretch, stretchA - diagonal, 0) + if(squash, rotatedSM[0][0], 0), if(stretch, stretchB - diagonal, 0) + if(squash, rotatedSM[0][1], 0)], //This could possibly be refactored a bit more.
				[if(stretch, stretchB - diagonal, 0) + if(squash, rotatedSM[1][0], 0), if(stretch, stretchB + diagonal, 0) + if(squash, rotatedSM[1][1], 0)],
				[if(stretch, stretchB + diagonal, 0) + if(squash, rotatedSM[2][0], 0), if(stretch, stretchA + diagonal, 0) + if(squash, rotatedSM[2][1], 0)],
				[if(stretch, stretchA + diagonal, 0) + if(squash, rotatedSM[3][0], 0), if(stretch, stretchA - diagonal, 0) + if(squash, rotatedSM[3][1], 0)],
			])
			where rotatedSM = map( //Rotate the squash distorts to match the axis of motion.
			      	[0,90,180,270], 
			      	Point2d <- inter(squashMask, loop(value-(mAngle(squashVector)+90))/360.0) ),  //Why value - mangle? I don't know why, but if it's not then horizontal squash is reversed. I don't understand why this works. Also: Why value-(mAngle(squashVector)+90) instead of what-should-be-the-equivalent value-mAngle(squashVector)+90? I _don't know_, but it only works the first way.
			where squashMask = map(
			      	[[ 0, 1],[ 0, 1], // Offsets for a /_\ sort of thing from a |_| sort of thing. Scales by abruptness of change.
			         [ 1, 0],[-1, 0], [ 0, 1]], //4 corners, 5th is just the 1st again.
			        rot(
			        	mAngle(squashVector)+90,
			        	map(value, value*len(squashVector)) 
			        )
			      ),
			      stretchA = (-mag_x)+( mag_y),     //The orthagonal stretch factors for x and y.
			      stretchB = ( mag_x)+(-mag_y),
			      skew = min(mag_x, mag_y)*diagonal //The diagonal stretch factor.
			where diagonal = _old_x - obj.x and _old_y - obj.y and if(sign(_old_x - obj.x) = sign(_old_y - obj.y), 1, -1), //Untested check we're actually moving on a diagonal before applying the diagonal scale. Added because it seems to get it slightly crooked otherwise.
			      mag_x = max(abs(_old_x - obj.x)-5, 0)*effect_strength_scale, //magnitude x and y
			      mag_y = max(abs(_old_y - obj.y)-5, 0)*effect_strength_scale, //Times 2 for strength of effect.
			where effect_strength_scale = min(obj.img_w, obj.img_h)/100.0*distort_strength),
		
		] where squashVector = fold( //Squash is now the 'total' distortion we need, in an [x,y] vector.
		      	[Point2d] <- map(squashWaves, lib.math.interpolate([[0,0],value.to,[0,0]], value.time) //Set the squash 'program' here. Currently: Start from nothing, go to full power, end at nothing.
		      		asserting value is {to:Point2d, time:decimal}), //Assert to cover for map not inferring the type of value correctly.
		      	zip(a,b), [0,0] )
		where squashWaves = filter(
		      	map(
		      		_squash_waves + if(lib.math.length([0,0], accel) > 4, [{to:accel, time:_squash_step}], []),
		      		{time: value.time+_squash_step, to:value.to} //Set squish progression here - smaller value, longer squish effect.
		      	) where accel = zip(new_delta, _old_delta, a-b),
		      	value.time < 1) 
		where new_delta = [obj.x-_old_x, obj.y-_old_y],
		      mAngle = lib.math.angle, //Math angle, 'angle' would be overridden by the built-in method of the same name.
		      loop = lib.math.loop,
		      inter = lib.math.interpolate,
		      rot = lib.math.rotate,
		      len = lib.math.length
		)),
	]",
	
	stop: "def(custom_obj obj) [
		set(obj.custom_draw, [0,1,2,3]+[[0,0]]*4),
		set(_old_x, null),
		set(_old_y, null),
		set(_squash_waves, []),
	]",
}