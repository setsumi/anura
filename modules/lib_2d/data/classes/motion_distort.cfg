{	
	stretch: true,
	squash: true,
	
	_old_x: {type: "null|int", default: null},
	_old_y: {type: "null|int", default: null},
	_older_x: {type: "null|int", default: null},
	_older_y: {type: "null|int", default: null},

	process: "def(custom_obj obj) [
		set(_old_x, obj.x),
		set(_old_y, obj.y),
		set(_older_x, _old_x),
		set(_older_y, _old_y),
		if(_old_x != null and _old_y != null, ([
			set(obj.custom_draw, [
				0,1,2,3, 
				[if(stretch, stretchA - diagonal, 0) + if(squash, 0, 0), if(stretch, stretchB - diagonal, 0) + if(squash, 0, 0)], //This could possibly be refactored a bit more.
				[if(stretch, stretchB - diagonal, 0) + if(squash, 0, 0), if(stretch, stretchB + diagonal, 0) + if(squash, 0, 0)],
				[if(stretch, stretchB + diagonal, 0) + if(squash, 0, 0), if(stretch, stretchA + diagonal, 0) + if(squash, 0, 0)],
				[if(stretch, stretchA + diagonal, 0) + if(squash, 0, 0), if(stretch, stretchA - diagonal, 0) + if(squash, 0, 0)],
			]),
			//So, squashMask is read by getting the two 'best' matches for the rotation and tweening between them. 315° is index 0, 45° is 1, 135° is 2, 225° is 3. Add direction of the vector of the rate of change in our velocity, mod by 360. From this list of four rotations of the four corners, tween between the closest two corners according to how close we are to them.
			//lib.math.interpolate has a 2-arity edition which will be perfect here. We'll have to duplicate the first element as the last, though, because we'll loop around. Goes from 0.0 to 1.0, so we'll divide by… 360, after mod by (lib.math.loop by?) 360, and it'll work out. Subtract 45° or something to line up the upper-left corner with index 0.
			//(Do we need to add object rotation to this as well? )
		] where squashMask = [[ 0,-1],[ 0,-1],
		                      [-1, 0],[ 1, 0], [0,-1]], // Offsets for a /_\ sort of thing from a |_| sort of thing.
		  where stretchA = (-mag_x)+( mag_y),     //The orthagonal stretch factors for x and y.
		        stretchB = ( mag_x)+(-mag_y),
		        skew = min(mag_x, mag_y)*diagonal //The diagonal stretch factor.
		  where diagonal = if(sign(_old_x - obj.x) = sign(_old_y - obj.y), 1, -1),
		        mag_x = max(abs(_old_x - obj.x)-5, 0)*effect_strength_scale, //magnitude x and y
		        mag_y = max(abs(_old_y - obj.y)-5, 0)*effect_strength_scale, //Times 2 for strength of effect.
		  where effect_strength_scale = min(obj.img_w, obj.img_h)/80.0
		)),
	]",
	
	stop: "def(custom_obj obj) [
		set(obj.custom_draw, [0,1,2,3]+[[0,0]]*4),
		set(_old_x, null),
		set(_old_y, null),
		set(_older_x, null),
		set(_older_y, null),
	]",
}