{
	id: "game_icon",
	is_strict: true,

	properties: {
		size: { default: 512.0, set: "[invalidate(), set(_data, value)]" },
		scaling: { type: "decimal", get: "size/512.0", set: "[invalidate(), set(size, 512*value)]", variable: false },
		icon: { type: "string", set: "[
			invalidate(),
			set(_data, value),
		]" },

		invalidate: "def() ->commands set(me._dirty, true)",

		_dirty: false,

		_update_canvas: "def() ->commands [

		set(animation, {
			id: 'svg',
			image: 'svg',
			fbo: c.render(int(scaling*512), int(scaling*512), [c.scale(scaling,scaling), c.draw_svg('images/icons/' + icon)]) where c = canvas(),
			x: 0,
			y: 0,
			w: int(scaling*512),
			h: int(scaling*512),
			scale: 1.0,
			frames: 1,
			duration: -1,
		}),
		set(me._dirty, false)
		]
		
		",
	},

	on_process: "if(_dirty, _update_canvas())",

	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 86,
		y: 73,
		w: 28,
		h: 28,
		collide: [0,0,28,28],
		frames: 1,
		duration: 1000,
	},

	shader: {
		name: "icon_render",
		create: "[
		]",

		draw: "[
			bind_texture(current_texture, 0),
		]",
		
		vertex: "
			uniform mat4 u_mvp_matrix;
			attribute vec4 a_position;
			attribute vec2 a_texcoord;
			varying vec2 v_texcoord;
			void main()
			{
				v_texcoord = a_texcoord;
				gl_Position = u_mvp_matrix * a_position;
			}
		",

		fragment: "
			#version 120
			uniform sampler2D u_tex_map;
			uniform vec4 u_color;
			varying vec2 v_texcoord;
			void main()
			{
				gl_FragColor = texture2D(u_tex_map, v_texcoord) * u_color;
				gl_FragColor[3] = gl_FragColor[3]*(gl_FragColor[0]+gl_FragColor[1]+gl_FragColor[2])/3.0;
			}
		",

		attributes: {
			vertex: "a_position",
			texcoord: "a_texcoord",
		},

		uniforms: {
			mvp_matrix: "u_mvp_matrix",
			color: "u_color",
		},
	}
}
